generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String?
  phone         String?
  passwordHash  String?
  emailVerified Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  providers     UserProvider[] // Keep the relation without onDelete
  companies     CompanyUser[] // Link to roles and access within companies
}

model AuthProvider {
  id        String         @id @default(uuid())
  name      String         @unique
  users     UserProvider[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model UserProvider {
  id             String       @id @default(uuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade) // Specify cascade delete here
  providerUserId String?
  providerId     String
  provider       AuthProvider @relation(fields: [providerId], references: [id])
  createdAt      DateTime     @default(now())
}

model Role {
  id           String        @id @default(uuid())
  name         String        @unique
  CompanyUsers CompanyUser[] // One-to-many relationship with CompanyUser
}

model Company {
  id        String   @id @default(uuid())
  name      String
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users    CompanyUser[] // Relationship to connect companies to users
  projects Project[] // One-to-many relationship with projects
}

model CompanyUser {
  id        String @id @default(uuid())
  userId    String
  companyId String
  roleId    String // Foreign key for Role

  user    User    @relation(fields: [userId], references: [id])
  company Company @relation(fields: [companyId], references: [id])
  role    Role    @relation(fields: [roleId], references: [id]) // Relationship with Role

  createdAt DateTime @default(now())

  @@unique([userId, companyId]) // Ensure a user can belong to a company only once
}

model Project {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  companyId String

  company   Company     @relation(fields: [companyId], references: [id])
  analytics Analytics[] // One-to-many relationship with analytics data
  surveys   Survey[] // One-to-many relationship with survey data
}

model Analytics {
  id                 String   @id @default(uuid())
  sessions           Int
  users              Int
  bounceRate         Float
  avgSessionDuration Float
  pageViews          Int
  conversionRate     Float
  createdAt          DateTime @default(now())

  projectId String
  project   Project @relation(fields: [projectId], references: [id])
}

model Survey {
  id        String   @id @default(uuid())
  type      String // e.g., 'NPS', 'CSAT', 'CES'
  title     String
  createdAt DateTime @default(now())
  projectId String

  project   Project          @relation(fields: [projectId], references: [id])
  responses SurveyResponse[] // One-to-many relationship with survey responses
}

model SurveyResponse {
  id        String   @id @default(uuid())
  type      String // 'NPS', 'CSAT', 'CES' (matches the type of survey)
  score     Float // Can handle various ranges like 0-10, 1-5, etc.
  minScore  Float? // Optional: minimum score for the survey (e.g., 0, 1)
  maxScore  Float? // Optional: maximum score for the survey (e.g., 10, 5)
  comment   String? // Optional: any additional comments
  createdAt DateTime @default(now())

  surveyId String
  survey   Survey @relation(fields: [surveyId], references: [id])
}
